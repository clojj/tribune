package com.sksamuel.monkeytail.core.parsers

import com.sksamuel.monkeytail.core.validation.Validated
import com.sksamuel.monkeytail.core.validation.invalid

/**
 * Maps a [Parser] that produces a nullable output, to one that produces a non-nullable
 * output, by replacing any nulls with the result of the given function [ifNull].
 *
 * @param ifNull the default generating function
 *
 * @return the same underlying value if not null, or the default otherwise
 */
fun <I, A, E> Parser<I, A?, E>.default(ifNull: () -> A): Parser<I, A, E> {
   return map { it ?: ifNull() }
}

/**
 * Composes an existing non-nullable [Parser] to accept null inputs which are returned as valid.
 */
fun <I, A, E> Parser<I, A, E>.nullable(): Parser<I?, A?, E> {
   return Parser { input ->
      if (input == null) Validated.Valid(null) else this@nullable.parse(input)
   }
}

/**
 * Wraps an existing [Parser] to accept nulls as input, which are returned as
 * errors, with the error message generated by the given function [ifNull].
 *
 * @param ifNull the error generating function
 *
 * @return valid if the input string is not null, otherwise invalid
 */
fun <I, A, E> Parser<I, A, E>.notNull(ifNull: () -> E): Parser<I?, A, E> {
   return parser { input: I? ->
      if (input == null) ifNull().invalid() else this@notNull.parse(input)
   }
}

